Delivery
--------

The task of the delivery is to deliver (or submit) a message. This can
be done either by using SMPP or using the GSM Mobile Application Part (MAP). The
delivery will attempt to deliver all SMS that are stored in the database.

The deliver functionality will select the SMS that is scheduled next and then
will try to find more SMS going to the same destination and will attempt to lock
them.

For each SMS a routing decision needs to be made. The routing can be based on the
link (the systemId) the SMS arrived, the source address and the destination. Each
route can have a list of destinations (e.g. MAPv3, MAPv2, SMPP).

=== Links

SMPP links can be configured as with the inserter. In addition SS7 links to
the osmo-stp can be configured.

Lifetime
~~~~~~~~

The SMS entry in the database contains various fields that control the lifetime.
The first is when to expire the SMS and give up. This field will be set by the
inserter on insert. The next field is the time the SMS should be delivered. The
SMS will be attempted to be submitted/delivered around that time and in the
success case will be removed from the database. In the failure case the system
will:

* Increase the attempts counter.
* Set a new deliveryTime. Currently this is 30 minutes from now. There is no
increasing penalty.

Scaling
~~~~~~~

Scaling occurs by setting the number of worker threads that determine how many
SMS will be tried to submitted/delivered at the same time and by starting multiple
instances of the delivery system. The database access is modeled to have only
one system to submit/deliver to a given destination at the same time. This will
be enforced by a locking scheme in the database and will work with multiple
delivery processes.

Routing
~~~~~~~

The system has two kind of routes. One of them is a default route and the other
is a specific route. Each specific route must have a destinationAddressPrefix and
can have a sourceAddressPrefix and a systemId. The minimum length for the
destinationAddressPrefix is two and if the sourceAddressPrefix is present it must
be at least two digits long as well.

To determine a route a database query will be used. The result is sorted by the
length of the destinationAddressPrefix, length of the sourceAddressPrefix, the
systemId (alphabetically) and if it is a default. The first entry of the result
will be picked.

This means the system will not pick a route where most fields match the most but
the route that has the longest destinationAddressPrefix and from routes the system
with the longest sourceAddressPrefix and if that is the same the system with the
matching systemId. The default route will be sorted last.


Route selection examples
^^^^^^^^^^^^^^^^^^^^^^^^

In case the following four routes are configured we will look at the route selection
of the system with some specific examples.

Route configuration
+++++++++++++++++++

Default route::
{ "routeName" : "default", "default": true }

Matching destination::
{ "routeName" : "destRoute1", "destinationAddressPrefix" : "49177" }

Matching destination::
{ "routeName" : "destRoute2", "destinationAddressPrefix" : "491772" }

Matching source and destination::
{ "routeName" : "sourceDestRoute", "sourceAddressPrefix": "49166", "destinationAddressPrefix: "49177" }

Matching systemId, source and destination::
{ "routeName" : "systemIdRoute", "systemId": "aSystemId", "sourceAddressPrefix" : "49166", "destinationAddressPrefix" : "49177"}

Route selection
+++++++++++++++

Destination 32342435343::
There is no match of the destinationAddressPrefix and the route called "default" will
be used.

Destination 4917723435 from 49303424324 on link example::
There are two routes that match these are "destRoute1" and "destRoute2". The route
with the longest matching prefix will be chosen and this is "destRoute2"

Destination 4917723435 from 49166233213 on line example::
In this case the sourceAddressPrefix of "sourceDestRoute" will match in addition to
the destinationAddressPrefix.

Destination 4917723435 from 49166233213 on line aSystemId::
In this case we have three rules that match the destination and two rules that match
the source but only one rule that is matching the systemId. This means the "systemIdRoute"
rule will be used.
